{"ast":null,"code":"import layerEvents from \"../../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\nexport default {\n  name: \"GeojsonLayer\",\n  mixins: [mixin],\n  computed: {\n    getSourceFeatures() {\n      return filter => {\n        if (this.map) {\n          return this.map.querySourceFeatures(this.sourceId, {\n            filter\n          });\n        }\n        return null;\n      };\n    },\n    getRenderedFeatures() {\n      return (geometry, filter) => {\n        if (this.map) {\n          return this.map.queryRenderedFeatures(geometry, {\n            layers: [this.layerId],\n            filter\n          });\n        }\n        return null;\n      };\n    },\n    getClusterExpansionZoom() {\n      return clusterId => {\n        return new Promise((resolve, reject) => {\n          if (this.mapSource) {\n            this.mapSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(zoom);\n            });\n          } else {\n            return reject(new Error(`Map source with id ${this.sourceId} not found.`));\n          }\n        });\n      };\n    },\n    getClusterChildren() {\n      return clusterId => {\n        return new Promise((resolve, reject) => {\n          const source = this.mapSource;\n          if (source) {\n            source.getClusterChildren(clusterId, (err, features) => {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(features);\n            });\n          } else {\n            return reject(new Error(`Map source with id ${this.sourceId} not found.`));\n          }\n        });\n      };\n    },\n    getClusterLeaves() {\n      return (...args) => {\n        return new Promise((resolve, reject) => {\n          if (this.mapSource) {\n            this.mapSource.getClusterLeaves(...args, (err, features) => {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(features);\n            });\n          } else {\n            return reject(new Error(`Map source with id ${this.sourceId} not found.`));\n          }\n        });\n      };\n    }\n  },\n  created() {\n    if (this.source) {\n      this.$watch(\"source.data\", function (next) {\n        if (this.initial) return;\n        this.mapSource.setData(next);\n      }, {\n        deep: true\n      });\n    }\n    this.$_deferredMount();\n  },\n  methods: {\n    $_deferredMount() {\n      // this.map = payload.map;\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      if (this.source) {\n        const source = {\n          type: \"geojson\",\n          ...this.source\n        };\n        try {\n          this.map.addSource(this.sourceId, source);\n        } catch (err) {\n          if (this.replaceSource) {\n            this.map.removeSource(this.sourceId);\n            this.map.addSource(this.sourceId, source);\n          }\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      this.initial = false;\n    },\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", {\n            layerId: this.layerId\n          });\n          return existed;\n        }\n      }\n      const layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        ...this.layer\n      };\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", {\n        layerId: this.layerId\n      });\n    },\n    setFeatureState(featureId, state) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.source\n        };\n        return this.map.setFeatureState(params, state);\n      }\n    },\n    getFeatureState(featureId) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.source\n        };\n        return this.map.getFeatureState(params);\n      }\n    },\n    removeFeatureState(featureId, sourceLayer, key) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.source,\n          sourceLayer\n        };\n        return this.map.removeFeatureState(params, key);\n      }\n    }\n  }\n};","map":{"version":3,"names":["layerEvents","mixin","name","mixins","computed","getSourceFeatures","filter","map","querySourceFeatures","sourceId","getRenderedFeatures","geometry","queryRenderedFeatures","layers","layerId","getClusterExpansionZoom","clusterId","Promise","resolve","reject","mapSource","err","zoom","Error","getClusterChildren","source","features","getClusterLeaves","args","created","$watch","next","initial","setData","deep","$_deferredMount","methods","on","$_watchSourceLoading","type","addSource","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","off","existed","getLayer","replace","removeLayer","$_emitEvent","layer","id","addLayer","before","setFeatureState","featureId","state","params","getFeatureState","removeFeatureState","sourceLayer","key"],"sources":["/Users/azizjonabdugafforov/Desktop/Code/SilkRoadExpress_WebApp/node_modules/vue-mapbox/src/components/layer/GeojsonLayer.js"],"sourcesContent":["import layerEvents from \"../../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\n\nexport default {\n  name: \"GeojsonLayer\",\n  mixins: [mixin],\n\n  computed: {\n    getSourceFeatures() {\n      return filter => {\n        if (this.map) {\n          return this.map.querySourceFeatures(this.sourceId, { filter });\n        }\n        return null;\n      };\n    },\n\n    getRenderedFeatures() {\n      return (geometry, filter) => {\n        if (this.map) {\n          return this.map.queryRenderedFeatures(geometry, {\n            layers: [this.layerId],\n            filter\n          });\n        }\n        return null;\n      };\n    },\n\n    getClusterExpansionZoom() {\n      return clusterId => {\n        return new Promise((resolve, reject) => {\n          if (this.mapSource) {\n            this.mapSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(zoom);\n            });\n          } else {\n            return reject(\n              new Error(`Map source with id ${this.sourceId} not found.`)\n            );\n          }\n        });\n      };\n    },\n\n    getClusterChildren() {\n      return clusterId => {\n        return new Promise((resolve, reject) => {\n          const source = this.mapSource;\n          if (source) {\n            source.getClusterChildren(clusterId, (err, features) => {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(features);\n            });\n          } else {\n            return reject(\n              new Error(`Map source with id ${this.sourceId} not found.`)\n            );\n          }\n        });\n      };\n    },\n\n    getClusterLeaves() {\n      return (...args) => {\n        return new Promise((resolve, reject) => {\n          if (this.mapSource) {\n            this.mapSource.getClusterLeaves(...args, (err, features) => {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(features);\n            });\n          } else {\n            return reject(\n              new Error(`Map source with id ${this.sourceId} not found.`)\n            );\n          }\n        });\n      };\n    }\n  },\n\n  created() {\n    if (this.source) {\n      this.$watch(\n        \"source.data\",\n        function(next) {\n          if (this.initial) return;\n          this.mapSource.setData(next);\n        },\n        { deep: true }\n      );\n    }\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      // this.map = payload.map;\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      if (this.source) {\n        const source = {\n          type: \"geojson\",\n          ...this.source\n        };\n        try {\n          this.map.addSource(this.sourceId, source);\n        } catch (err) {\n          if (this.replaceSource) {\n            this.map.removeSource(this.sourceId);\n            this.map.addSource(this.sourceId, source);\n          }\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      const layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        ...this.layer\n      };\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\n    },\n\n    setFeatureState(featureId, state) {\n      if (this.map) {\n        const params = { id: featureId, source: this.source };\n        return this.map.setFeatureState(params, state);\n      }\n    },\n\n    getFeatureState(featureId) {\n      if (this.map) {\n        const params = { id: featureId, source: this.source };\n        return this.map.getFeatureState(params);\n      }\n    },\n\n    removeFeatureState(featureId, sourceLayer, key) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.source,\n          sourceLayer\n        };\n        return this.map.removeFeatureState(params, key);\n      }\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}