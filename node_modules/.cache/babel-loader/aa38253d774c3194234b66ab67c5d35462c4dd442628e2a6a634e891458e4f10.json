{"ast":null,"code":"import layerEvents from \"../../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\nexport default {\n  name: \"VideoLayer\",\n  mixins: [mixin],\n  computed: {\n    video() {\n      return this.map.getSource(this.sourceId).getVideo();\n    }\n  },\n  created() {\n    if (this.source && this.source.coordinates) {\n      this.$watch(\"source.coordinates\", function (next) {\n        if (this.initial) return;\n        this.mapSource.setCoordinates(next);\n      });\n    }\n    this.$_deferredMount();\n  },\n  methods: {\n    $_deferredMount() {\n      const source = {\n        type: \"video\",\n        ...this.source\n      };\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.initial = false;\n    },\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", {\n            layerId: this.layerId\n          });\n          return existed;\n        }\n      }\n      let layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        type: \"background\",\n        ...this.layer\n      };\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", {\n        layerId: this.layerId\n      });\n    }\n  }\n};","map":{"version":3,"names":["layerEvents","mixin","name","mixins","computed","video","map","getSource","sourceId","getVideo","created","source","coordinates","$watch","next","initial","mapSource","setCoordinates","$_deferredMount","methods","type","on","$_watchSourceLoading","addSource","err","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","existed","getLayer","layerId","replace","removeLayer","$_emitEvent","layer","id","addLayer","before"],"sources":["/Users/azizjonabdugafforov/Desktop/Code/SilkRoadExpress_WebApp/node_modules/vue-mapbox/src/components/layer/VideoLayer.js"],"sourcesContent":["import layerEvents from \"../../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\n\nexport default {\n  name: \"VideoLayer\",\n  mixins: [mixin],\n\n  computed: {\n    video() {\n      return this.map.getSource(this.sourceId).getVideo();\n    }\n  },\n\n  created() {\n    if (this.source && this.source.coordinates) {\n      this.$watch(\"source.coordinates\", function(next) {\n        if (this.initial) return;\n        this.mapSource.setCoordinates(next);\n      });\n    }\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      const source = {\n        type: \"video\",\n        ...this.source\n      };\n\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      let layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        type: \"background\",\n        ...this.layer\n      };\n\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\n    }\n  }\n};\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,KAAK,MAAM,cAAc;AAEhC,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,MAAM,EAAE,CAACF,KAAK,CAAC;EAEfG,QAAQ,EAAE;IACRC,KAAKA,CAAA,EAAG;MACN,OAAO,IAAI,CAACC,GAAG,CAACC,SAAS,CAAC,IAAI,CAACC,QAAQ,CAAC,CAACC,QAAQ,CAAC,CAAC;IACrD;EACF,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACC,MAAM,IAAI,IAAI,CAACA,MAAM,CAACC,WAAW,EAAE;MAC1C,IAAI,CAACC,MAAM,CAAC,oBAAoB,EAAE,UAASC,IAAI,EAAE;QAC/C,IAAI,IAAI,CAACC,OAAO,EAAE;QAClB,IAAI,CAACC,SAAS,CAACC,cAAc,CAACH,IAAI,CAAC;MACrC,CAAC,CAAC;IACJ;IACA,IAAI,CAACI,eAAe,CAAC,CAAC;EACxB,CAAC;EAEDC,OAAO,EAAE;IACPD,eAAeA,CAAA,EAAG;MAChB,MAAMP,MAAM,GAAG;QACbS,IAAI,EAAE,OAAO;QACb,GAAG,IAAI,CAACT;MACV,CAAC;MAED,IAAI,CAACL,GAAG,CAACe,EAAE,CAAC,aAAa,EAAE,IAAI,CAACC,oBAAoB,CAAC;MACrD,IAAI;QACF,IAAI,CAAChB,GAAG,CAACiB,SAAS,CAAC,IAAI,CAACf,QAAQ,EAAEG,MAAM,CAAC;MAC3C,CAAC,CAAC,OAAOa,GAAG,EAAE;QACZ,IAAI,IAAI,CAACC,aAAa,EAAE;UACtB,IAAI,CAACnB,GAAG,CAACoB,YAAY,CAAC,IAAI,CAAClB,QAAQ,CAAC;UACpC,IAAI,CAACF,GAAG,CAACiB,SAAS,CAAC,IAAI,CAACf,QAAQ,EAAEG,MAAM,CAAC;QAC3C;MACF;MACA,IAAI,CAACgB,UAAU,CAAC,CAAC;MACjB,IAAI,CAACC,iBAAiB,CAAC5B,WAAW,CAAC;MACnC,IAAI,CAACe,OAAO,GAAG,KAAK;IACtB,CAAC;IAEDY,UAAUA,CAAA,EAAG;MACX,IAAIE,OAAO,GAAG,IAAI,CAACvB,GAAG,CAACwB,QAAQ,CAAC,IAAI,CAACC,OAAO,CAAC;MAC7C,IAAIF,OAAO,EAAE;QACX,IAAI,IAAI,CAACG,OAAO,EAAE;UAChB,IAAI,CAAC1B,GAAG,CAAC2B,WAAW,CAAC,IAAI,CAACF,OAAO,CAAC;QACpC,CAAC,MAAM;UACL,IAAI,CAACG,WAAW,CAAC,cAAc,EAAE;YAAEH,OAAO,EAAE,IAAI,CAACA;UAAQ,CAAC,CAAC;UAC3D,OAAOF,OAAO;QAChB;MACF;MACA,IAAIM,KAAK,GAAG;QACVC,EAAE,EAAE,IAAI,CAACL,OAAO;QAChBpB,MAAM,EAAE,IAAI,CAACH,QAAQ;QACrBY,IAAI,EAAE,YAAY;QAClB,GAAG,IAAI,CAACe;MACV,CAAC;MAED,IAAI,CAAC7B,GAAG,CAAC+B,QAAQ,CAACF,KAAK,EAAE,IAAI,CAACG,MAAM,CAAC;MACrC,IAAI,CAACJ,WAAW,CAAC,OAAO,EAAE;QAAEH,OAAO,EAAE,IAAI,CAACA;MAAQ,CAAC,CAAC;IACtD;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}